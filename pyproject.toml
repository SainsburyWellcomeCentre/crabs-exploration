[project]
name = "crabs"
authors = [
    { email = "n.aznan@ucl.ac.uk", name = "Nik Khadijah Nik Aznan" },
    { email = "s.minano@ucl.ac.uk", name = "Sofia Minano" },
]
description = "A toolkit for detecting and tracking crabs in the field."
readme = "README.md"
requires-python = ">=3.9.0"
dynamic = ["version"]

license = { text = "BSD-3-Clause" }
urls.homepage = "https://github.com/SainsburyWellcomeCentre/crabs-exploration"

classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Operating System :: POSIX",
    "License :: OSI Approved :: BSD License",
]
dependencies = [
    "opencv-python",
    "sleap[pypi]==1.3.3",
    "typer",
    "timecode",
    "torch",
    "torchvision",
    "pycocotools",
    "filterpy",
    "lightning",
    "mlflow",
    "optuna",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "coverage",
    "tox",
    "mypy",
    "pre-commit",
    "ruff",
    "setuptools_scm",
    "check-manifest",
    "pooch",
    "tqdm",
    # "codespell",
    # "pandas-stubs",
    # "types-attrs",
    # "types-PyYAML",
    # "types-requests",
]

[project.scripts]
extract-frames = "crabs.bboxes_labelling.extract_frames_to_label_w_sleap:app_wrapper"
combine-annotations = "crabs.bboxes_labelling.combine_and_format_annotations:app_wrapper"
train-detector = "crabs.detector.train_model:app_wrapper"
evaluate-detector = "crabs.detector.evaluate_model:app_wrapper"
detect-and-track-video = "crabs.tracker.track_video:app_wrapper"
# verify-videos-and-extract-samples
# extract-additional-channels


[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["crabs*"]
exclude = ["tests"]

[tool.pytest.ini_options]
addopts = "--cov=crabs"

# [tool.black]
# target-version = ['py39', 'py310']
# skip-string-normalization = false
# line-length = 79

[tool.setuptools_scm]

[tool.check-manifest]
ignore = [
    ".yaml",
    "tox.ini",
    "tests/",
    "tests/test_unit/",
    "tests/test_integration/",
]

[tool.ruff]
line-length = 79
exclude = ["__init__.py", "build", ".eggs"]
fix = true

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/
ignore = [
    "D203", # one blank line before class
    "D213", # multi-line-summary second line
]
select = [
    "E",      # pycodestyle errors
    "F",      # Pyflakes
    "UP",     # pyupgrade
    "I",      # isort
    "B",      # flake8 bugbear
    "SIM",    # flake8 simplify
    "C90",    # McCabe complexity
    "D",      # pydocstyle
    "NPY201", # checks for syntax that was deprecated in numpy2.0
]
per-file-ignores = { "tests/*" = [
    "D100", # missing docstring in public module
    "D205", # missing blank line between summary and description
    "D103", # missing docstring in public function
], "examples/*" = [
    "B018", # Found useless expression
    "D103", # Missing docstring in public function
    "D400", # first line should end with a period.
    "D415", # first line should end with a period, question mark...
    "D205", # missing blank line between summary and description
] }

[tool.ruff.format]
docstring-code-format = true # Also format code in docstrings


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{39,310}
isolated_build = True

[gh-actions]
python =
    3.9: py39
    3.10: py310

[testenv]
extras =
    dev
commands =
    pytest -v --color=yes --cov=crabs --cov-report=xml
"""
